// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: enauC2JUZgx5ZyyeLXbdDM
// Component: 7tEzuuLezy2GoN
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PaheHeaderMenuTextDark from "../../PaheHeaderMenuTextDark"; // plasmic-import: oidbDHS-cDyW9A/component
import Instagram from "../../Instagram"; // plasmic-import: 3mn9yXM9haJqFt/component
import Footer from "../../Footer"; // plasmic-import: eKObOqjQGvOV6B/component
import { useScreenVariants as useScreenVariantsllkaOhQ1Bc8EW } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: LLKAOh_Q1bc8eW/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_fine_line_charters.module.css"; // plasmic-import: enauC2JUZgx5ZyyeLXbdDM/projectcss
import sty from "./PlasmicAboutUs.module.css"; // plasmic-import: 7tEzuuLezy2GoN/css

export const PlasmicAboutUs__VariantProps = new Array();

export const PlasmicAboutUs__ArgProps = new Array();

function PlasmicAboutUs__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsllkaOhQ1Bc8EW()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"About Us"}</title>
        <meta key="og:title" property="og:title" content={"About Us"} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <PaheHeaderMenuTextDark
            data-plasmic-name={"paheHeaderMenuTextDark"}
            data-plasmic-override={overrides.paheHeaderMenuTextDark}
            className={classNames("__wab_instance", sty.paheHeaderMenuTextDark)}
          />

          <section className={classNames(projectcss.all, sty.section__uen8)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"container433"}
              data-plasmic-override={overrides.container433}
              hasGap={true}
              className={classNames(projectcss.all, sty.container433)}
            >
              <div className={classNames(projectcss.all, sty.column___7Yus)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__tsoZd)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__eC1S
                      )}
                    >
                      {"Commerce.js Demo Store"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6RwOj
                      )}
                    >
                      {
                        "This is an open source storefront built using Checâ€™s headless architecture and the Commerce.js SDK. Commerce.js is a smarter, more efficient way to build eCommerce projects, and we hope you can see that as you explore the world custom eCommerce. Please build on top of, or pick apart this project for your own use. Everything in this project, from the storefront, to the cart, checkout and receipt, is 100% customizable. To build more custom eCommerce projects, using any frontend framework or platform, head over to commercejs.com."
                      }
                    </div>

                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___87VPw
                        )}
                      >
                        <button
                          className={classNames(
                            projectcss.all,
                            projectcss.button,
                            projectcss.__wab_text,
                            sty.button__pO5N
                          )}
                        >
                          {"Documentation"}
                        </button>

                        <button
                          className={classNames(
                            projectcss.all,
                            projectcss.button,
                            projectcss.__wab_text,
                            sty.button__mxo7I
                          )}
                        >
                          {"Guides from the community"}
                        </button>
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                ) : null}
              </div>

              <div className={classNames(projectcss.all, sty.column___0H2Ih)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__uCMj0)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/fine_line_charters/images/cjsIllustrationsvg.svg",
                    fullWidth: 195,
                    fullHeight: 150,
                    aspectRatio: 1.301887
                  }}
                />
              </div>
            </p.Stack>
          </section>

          <section className={classNames(projectcss.all, sty.section__nzLa9)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"container434"}
              data-plasmic-override={overrides.container434}
              hasGap={true}
              className={classNames(projectcss.all, sty.container434)}
            >
              <div className={classNames(projectcss.all, sty.column__cfrZv)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___9RhtV)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/fine_line_charters/images/netlifyIllustrationsvg.svg",
                    fullWidth: 217,
                    fullHeight: 150,
                    aspectRatio: 1.448276
                  }}
                />
              </div>

              <div className={classNames(projectcss.all, sty.column__aSGs)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__uvOuL)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__gv243
                      )}
                    >
                      {"Deploy to Netlify"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lJsw4
                      )}
                    >
                      {
                        "If you would like to deploy this project live today, click the button below and watch the magic happen!"
                      }
                    </div>

                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__r0Dq9
                        )}
                      >
                        <button
                          className={classNames(
                            projectcss.all,
                            projectcss.button,
                            projectcss.__wab_text,
                            sty.button__mhdP
                          )}
                        >
                          {"Deploy to Netlify"}
                        </button>
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                ) : null}
              </div>
            </p.Stack>
          </section>

          <section className={classNames(projectcss.all, sty.section__vcm4N)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"container435"}
              data-plasmic-override={overrides.container435}
              hasGap={true}
              className={classNames(projectcss.all, sty.container435)}
            >
              <div className={classNames(projectcss.all, sty.column__fAbsj)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__poxju)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2___7ZoZ1
                      )}
                    >
                      {"Clone in GitHub"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yT8Ua
                      )}
                    >
                      {
                        "If you would like to clone this project and do a manual setup, go to the repository below!"
                      }
                    </div>

                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__grq5S
                        )}
                      >
                        <button
                          className={classNames(
                            projectcss.all,
                            projectcss.button,
                            projectcss.__wab_text,
                            sty.button__pHdo
                          )}
                        >
                          {"Clone in GitHub"}
                        </button>
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                ) : null}
              </div>

              <div className={classNames(projectcss.all, sty.column__wPotc)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__wple9)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={
                    "/plasmic/fine_line_charters/images/githubIllustrationsvg.svg"
                  }
                />
              </div>
            </p.Stack>
          </section>

          <section className={classNames(projectcss.all, sty.section__mzvN7)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"container436"}
              data-plasmic-override={overrides.container436}
              hasGap={true}
              className={classNames(projectcss.all, sty.container436)}
            >
              <div className={classNames(projectcss.all, sty.column__os6VS)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__p3BTd)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"auto"}
                  loading={"lazy"}
                  src={
                    "/plasmic/fine_line_charters/images/blogIllustration1Svg.svg"
                  }
                />
              </div>

              <div className={classNames(projectcss.all, sty.column__tHnin)}>
                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___1Tkjn)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__ylnUu
                      )}
                    >
                      {"Technical Blog"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mIpxc
                      )}
                    >
                      {
                        "Read the full technical tutorial here if you want to get into the nitty gritty!"
                      }
                    </div>

                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gpWyk
                        )}
                      >
                        <button
                          className={classNames(
                            projectcss.all,
                            projectcss.button,
                            projectcss.__wab_text,
                            sty.button__ffMi5
                          )}
                        >
                          {"Read Blog"}
                        </button>
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                ) : null}
              </div>
            </p.Stack>
          </section>

          <Instagram
            data-plasmic-name={"instagram"}
            data-plasmic-override={overrides.instagram}
            className={classNames("__wab_instance", sty.instagram)}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "paheHeaderMenuTextDark",
    "container433",
    "container434",
    "container435",
    "container436",
    "instagram",
    "footer"
  ],

  paheHeaderMenuTextDark: ["paheHeaderMenuTextDark"],
  container433: ["container433"],
  container434: ["container434"],
  container435: ["container435"],
  container436: ["container436"],
  instagram: ["instagram"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAboutUs__ArgProps,
      internalVariantPropNames: PlasmicAboutUs__VariantProps
    });

    return PlasmicAboutUs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAboutUs";
  } else {
    func.displayName = `PlasmicAboutUs.${nodeName}`;
  }
  return func;
}

export const PlasmicAboutUs = Object.assign(
  // Top-level PlasmicAboutUs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    paheHeaderMenuTextDark: makeNodeComponent("paheHeaderMenuTextDark"),
    container433: makeNodeComponent("container433"),
    container434: makeNodeComponent("container434"),
    container435: makeNodeComponent("container435"),
    container436: makeNodeComponent("container436"),
    instagram: makeNodeComponent("instagram"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicAboutUs
    internalVariantProps: PlasmicAboutUs__VariantProps,
    internalArgProps: PlasmicAboutUs__ArgProps
  }
);

export default PlasmicAboutUs;
/* prettier-ignore-end */
