// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: enauC2JUZgx5ZyyeLXbdDM
// Component: 4sCe1RdzCyGEz
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: O2ZVKHEd6XJZd/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_fine_line_charters.module.css"; // plasmic-import: enauC2JUZgx5ZyyeLXbdDM/projectcss
import sty from "./PlasmicValue.module.css"; // plasmic-import: 4sCe1RdzCyGEz/css
import TakeOffIcon from "./icons/PlasmicIcon__TakeOff"; // plasmic-import: 39LcbCaGVC-27p/icon
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: cV6OVkXZsVBTXg/icon

export const PlasmicValue__VariantProps = new Array(
  "topBottom",
  "center",
  "withButton"
);

export const PlasmicValue__ArgProps = new Array(
  "children",
  "icon",
  "children2"
);

function PlasmicValue__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootcenter]: hasVariant(variants, "center", "center"),
          [sty.roottopBottom]: hasVariant(variants, "topBottom", "topBottom"),
          [sty.rootwithButton]: hasVariant(variants, "withButton", "withButton")
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__qcNhs, {
          [sty.freeBoxcenter__qcNhs9Gi3Q]: hasVariant(
            variants,
            "center",
            "center"
          ),

          [sty.freeBoxtopBottom__qcNhsJFwEr]: hasVariant(
            variants,
            "topBottom",
            "topBottom"
          )
        })}
      >
        <div className={classNames(projectcss.all, sty.freeBox__gq6Uq)}>
          {p.renderPlasmicSlot({
            defaultContents: (
              <TakeOffIcon
                className={classNames(projectcss.all, sty.svg__aTeUk)}
                role={"img"}
              />
            ),

            value: args.icon
          })}
        </div>
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__nhzdG, {
          [sty.freeBoxcenter__nhzdG9Gi3Q]: hasVariant(
            variants,
            "center",
            "center"
          ),

          [sty.freeBoxwithButton__nhzdGlvWr5]: hasVariant(
            variants,
            "withButton",
            "withButton"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__idOAy
                )}
              >
                {"Worldwide Shipping"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__u1St
                )}
              >
                {"Special financing and earn rewards."}
              </div>
            </React.Fragment>
          ),

          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrencenter]: hasVariant(
              variants,
              "center",
              "center"
            )
          })
        })}
      </p.Stack>

      {(hasVariant(variants, "withButton", "withButton") ? true : false) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__fgtke, {
            [sty.freeBoxcenter__fgtke9Gi3Q]: hasVariant(
              variants,
              "center",
              "center"
            ),

            [sty.freeBoxwithButton__fgtkelvWr5]: hasVariant(
              variants,
              "withButton",
              "withButton"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <Button
                className={classNames("__wab_instance", sty.button___2WLEj, {
                  [sty.buttonwithButton___2WLEjlvWr5]: hasVariant(
                    variants,
                    "withButton",
                    "withButton"
                  )
                })}
                colors={"black"}
                endIcon={
                  <RightArrowIcon
                    className={classNames(projectcss.all, sty.svg__bLhuo)}
                    role={"img"}
                  />
                }
                rounded={true}
                size={"large"}
              />
            ),

            value: args.children2,
            className: classNames(sty.slotTargetChildren2, {
              [sty.slotTargetChildren2center]: hasVariant(
                variants,
                "center",
                "center"
              ),

              [sty.slotTargetChildren2withButton]: hasVariant(
                variants,
                "withButton",
                "withButton"
              )
            })
          })}
        </p.Stack>
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicValue__ArgProps,
      internalVariantPropNames: PlasmicValue__VariantProps
    });

    return PlasmicValue__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicValue";
  } else {
    func.displayName = `PlasmicValue.${nodeName}`;
  }
  return func;
}

export const PlasmicValue = Object.assign(
  // Top-level PlasmicValue renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicValue
    internalVariantProps: PlasmicValue__VariantProps,
    internalArgProps: PlasmicValue__ArgProps
  }
);

export default PlasmicValue;
/* prettier-ignore-end */
