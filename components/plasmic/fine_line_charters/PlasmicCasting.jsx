// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: enauC2JUZgx5ZyyeLXbdDM
// Component: UbZbKy-8d-
import * as React from "react";
import Head from "next/head";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import PaheHeaderMenuTextDark from "../../PaheHeaderMenuTextDark"; // plasmic-import: oidbDHS-cDyW9A/component
import Instagram from "../../Instagram"; // plasmic-import: 3mn9yXM9haJqFt/component
import Footer from "../../Footer"; // plasmic-import: eKObOqjQGvOV6B/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_fine_line_charters.module.css"; // plasmic-import: enauC2JUZgx5ZyyeLXbdDM/projectcss
import sty from "./PlasmicCasting.module.css"; // plasmic-import: UbZbKy-8d-/css

export const PlasmicCasting__VariantProps = new Array();

export const PlasmicCasting__ArgProps = new Array();

function PlasmicCasting__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{"About Us"}</title>
        <meta key="og:title" property="og:title" content={"About Us"} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <PaheHeaderMenuTextDark
            data-plasmic-name={"paheHeaderMenuTextDark"}
            data-plasmic-override={overrides.paheHeaderMenuTextDark}
            className={classNames("__wab_instance", sty.paheHeaderMenuTextDark)}
          />

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__bC4DK)}
              >
                <h2
                  data-plasmic-name={"h2"}
                  data-plasmic-override={overrides.h2}
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2
                  )}
                >
                  {"Casting Fishing Trips"}
                </h2>

                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {
                    "Read the full technical tutorial here if you want to get into the nitty gritty!"
                  }
                </div>

                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__nbdie)}
                  >
                    <button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button
                      )}
                    >
                      {"Read Blog"}
                    </button>
                  </p.Stack>
                ) : null}
              </p.Stack>
            ) : null}
          </section>

          <Instagram
            data-plasmic-name={"instagram"}
            data-plasmic-override={overrides.instagram}
            className={classNames("__wab_instance", sty.instagram)}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "paheHeaderMenuTextDark",
    "section",
    "h2",
    "text",
    "button",
    "instagram",
    "footer"
  ],

  paheHeaderMenuTextDark: ["paheHeaderMenuTextDark"],
  section: ["section", "h2", "text", "button"],
  h2: ["h2"],
  text: ["text"],
  button: ["button"],
  instagram: ["instagram"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCasting__ArgProps,
      internalVariantPropNames: PlasmicCasting__VariantProps
    });

    return PlasmicCasting__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCasting";
  } else {
    func.displayName = `PlasmicCasting.${nodeName}`;
  }
  return func;
}

export const PlasmicCasting = Object.assign(
  // Top-level PlasmicCasting renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    paheHeaderMenuTextDark: makeNodeComponent("paheHeaderMenuTextDark"),
    section: makeNodeComponent("section"),
    h2: makeNodeComponent("h2"),
    text: makeNodeComponent("text"),
    button: makeNodeComponent("button"),
    instagram: makeNodeComponent("instagram"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicCasting
    internalVariantProps: PlasmicCasting__VariantProps,
    internalArgProps: PlasmicCasting__ArgProps
  }
);

export default PlasmicCasting;
/* prettier-ignore-end */
