// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: enauC2JUZgx5ZyyeLXbdDM
// Component: ngYacomT_5P__7
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: qpULM0wwWW/codeComponent
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: S1F4q0wN6b/codeComponent
import { ProductPriceComponent } from "@plasmicpkgs/commerce"; // plasmic-import: _PaJxGc8gf/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_fine_line_charters.module.css"; // plasmic-import: enauC2JUZgx5ZyyeLXbdDM/projectcss
import sty from "./PlasmicProductMain.module.css"; // plasmic-import: ngYacomT_5P__7/css

export const PlasmicProductMain__VariantProps = new Array();

export const PlasmicProductMain__ArgProps = new Array();

function PlasmicProductMain__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <p.PlasmicLink
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        "cover-container"
      )}
      component={Link}
      href={"/item"}
      platform={"nextjs"}
    >
      <ProductMedia
        data-plasmic-name={"productMedia"}
        data-plasmic-override={overrides.productMedia}
        className={classNames("__wab_instance", sty.productMedia)}
        mediaSize={"cover"}
      />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__qTVm5)}
      >
        <h3
          data-plasmic-name={"h3"}
          data-plasmic-override={overrides.h3}
          className={classNames(projectcss.all, projectcss.h3, sty.h3)}
        >
          <ProductTextField
            className={classNames(
              "__wab_instance",
              sty.productTextField__juJRy
            )}
            field={"name"}
          />
        </h3>

        <div className={classNames(projectcss.all, sty.freeBox__xNdzq)}>
          <ProductTextField
            className={classNames(
              "__wab_instance",
              sty.productTextField__boNBi
            )}
            field={"description"}
          />
        </div>

        <h5
          data-plasmic-name={"h5"}
          data-plasmic-override={overrides.h5}
          className={classNames(projectcss.all, projectcss.h5, sty.h5)}
        >
          <ProductPriceComponent
            data-plasmic-name={"productPrice"}
            data-plasmic-override={overrides.productPrice}
            className={classNames("__wab_instance", sty.productPrice)}
          />
        </h5>
      </p.Stack>
    </p.PlasmicLink>
  );
}

const PlasmicDescendants = {
  root: ["root", "productMedia", "h3", "h5", "productPrice"],
  productMedia: ["productMedia"],
  h3: ["h3"],
  h5: ["h5", "productPrice"],
  productPrice: ["productPrice"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProductMain__ArgProps,
      internalVariantPropNames: PlasmicProductMain__VariantProps
    });

    return PlasmicProductMain__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductMain";
  } else {
    func.displayName = `PlasmicProductMain.${nodeName}`;
  }
  return func;
}

export const PlasmicProductMain = Object.assign(
  // Top-level PlasmicProductMain renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    productMedia: makeNodeComponent("productMedia"),
    h3: makeNodeComponent("h3"),
    h5: makeNodeComponent("h5"),
    productPrice: makeNodeComponent("productPrice"),
    // Metadata about props expected for PlasmicProductMain
    internalVariantProps: PlasmicProductMain__VariantProps,
    internalArgProps: PlasmicProductMain__ArgProps
  }
);

export default PlasmicProductMain;
/* prettier-ignore-end */
