// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: enauC2JUZgx5ZyyeLXbdDM
// Component: gVUEUfniIrDhqE
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { CategoryMedia } from "@plasmicpkgs/commerce"; // plasmic-import: yOXBNIAJxzUq/codeComponent
import { CategoryField } from "@plasmicpkgs/commerce"; // plasmic-import: hzqiq--xdG5T/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_fine_line_charters.module.css"; // plasmic-import: enauC2JUZgx5ZyyeLXbdDM/projectcss
import sty from "./PlasmicCollection.module.css"; // plasmic-import: gVUEUfniIrDhqE/css

export const PlasmicCollection__VariantProps = new Array();

export const PlasmicCollection__ArgProps = new Array("children", "slot");

function PlasmicCollection__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;
  return (
    <p.PlasmicLink
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      component={Link}
      href={"/category"}
      platform={"nextjs"}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <CategoryMedia
            className={classNames("__wab_instance", sty.categoryMedia__qh6Q)}
          />
        ),

        value: args.children
      })}

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <h3
          data-plasmic-name={"h3"}
          data-plasmic-override={overrides.h3}
          className={classNames(projectcss.all, projectcss.h3, sty.h3)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <CategoryField
                className={classNames(
                  "__wab_instance",
                  sty.categoryField__iiKu
                )}
                field={"name"}
              />
            ),

            value: args.slot
          })}
        </h3>
      </div>
    </p.PlasmicLink>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "h3"],
  freeBox: ["freeBox", "h3"],
  h3: ["h3"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCollection__ArgProps,
      internalVariantPropNames: PlasmicCollection__VariantProps
    });

    return PlasmicCollection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCollection";
  } else {
    func.displayName = `PlasmicCollection.${nodeName}`;
  }
  return func;
}

export const PlasmicCollection = Object.assign(
  // Top-level PlasmicCollection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    h3: makeNodeComponent("h3"),
    // Metadata about props expected for PlasmicCollection
    internalVariantProps: PlasmicCollection__VariantProps,
    internalArgProps: PlasmicCollection__ArgProps
  }
);

export default PlasmicCollection;
/* prettier-ignore-end */
